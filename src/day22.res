open Belt

type action = On | Off

let part1 = inputs => {
  let actions = List.fromArray(inputs)->List.reverse
  // return 1 if action is on, 0 if off, defaults to 0
  let rec findAction = (x, y, z, actions) => {
    switch actions {
    | list{(a, (x1, x2), (y1, y2), (z1, z2)), ...tl} =>
      if x >= x1 && x <= x2 && y >= y1 && y <= y2 && z >= z1 && z <= z2 {
        switch a {
        | On => 1
        | Off => 0
        }
      } else {
        findAction(x, y, z, tl)
      }
    | _ => 0
    }
  }
  let count = ref(0)
  for x in -50 to 50 {
    for y in -50 to 50 {
      for z in -50 to 50 {
        count := count.contents + findAction(x, y, z, actions)
      }
    }
  }
  Js.log2("Part 1:", count.contents)
}

module BoxCmp = Id.MakeComparable({
  // x1, x2, y1, y2, z1, z2
  type t = (int, int, int, int, int, int)
  let cmp = (a, b) => Pervasives.compare(a, b)
})

let flattenRange = ((x1, x2), (y1, y2), (z1, z2)) => {
  (x1, x2, y1, y2, z1, z2)
}

// difference of two boxes
// return a list of boxes that represent the volume contained within the first box
// but not the second
let boxDiff = ((x1, x2, y1, y2, z1, z2) as orig, (x1', x2', y1', y2', z1', z2')) => {
  if x2' < x1 || x1' > x2 || y2' < y1 || y1' > y2 || z2' < z1 || z1' > z2 {
    // the first box if there is no intersection
    [orig]
  } else {
    // 0 to 6 shapes will be returned
    let shapes = []
    let intx1 = if x1' > x1 {
      ignore(Js.Array2.push(shapes, (x1, x1' - 1, y1, y2, z1, z2)))
      x1'
    } else {
      x1
    }
    let intx2 = if x2' < x2 {
      ignore(Js.Array2.push(shapes, (x2' + 1, x2, y1, y2, z1, z2)))
      x2'
    } else {
      x2
    }
    let inty1 = if y1' > y1 {
      ignore(Js.Array2.push(shapes, (intx1, intx2, y1, y1' - 1, z1, z2)))
      y1'
    } else {
      y1
    }
    let inty2 = if y2' < y2 {
      ignore(Js.Array2.push(shapes, (intx1, intx2, y2' + 1, y2, z1, z2)))
      y2'
    } else {
      y2
    }
    if z1' > z1 {
      ignore(Js.Array2.push(shapes, (intx1, intx2, inty1, inty2, z1, z1' - 1)))
    }
    if z2' < z2 {
      ignore(Js.Array2.push(shapes, (intx1, intx2, inty1, inty2, z2' + 1, z2)))
    }
    shapes
  }
}

let part2 = inputs => {
  let boxes = Array.reduce(inputs, Set.make(~id=module(BoxCmp)), (acc, (action, xr, yr, zr)) => {
    // process existing boxes to remove volumes intersecting with the new box
    let newSet = Set.reduce(acc, Set.make(~id=module(BoxCmp)), (newAcc, box) => {
      let diffs = boxDiff(box, flattenRange(xr, yr, zr))
      Set.mergeMany(newAcc, diffs)
    })
    switch action {
    | On => Set.add(newSet, flattenRange(xr, yr, zr))
    | Off => newSet
    }
  })
  let volume = Set.reduce(boxes, 0.0, (sum, (x1, x2, y1, y2, z1, z2)) => {
    sum +. Int.toFloat(x2 - x1 + 1) *. Int.toFloat(y2 - y1 + 1) *. Int.toFloat(z2 - z1 + 1)
  })
  Js.log2("Part 2:", volume)
}

let inputs = [
  (On, (-20, 26), (-36, 17), (-47, 7)),
  (On, (-20, 33), (-21, 23), (-26, 28)),
  (On, (-22, 28), (-29, 23), (-38, 16)),
  (On, (-46, 7), (-6, 46), (-50, -1)),
  (On, (-49, 1), (-3, 46), (-24, 28)),
  (On, (2, 47), (-22, 22), (-23, 27)),
  (On, (-27, 23), (-28, 26), (-21, 29)),
  (On, (-39, 5), (-6, 47), (-3, 44)),
  (On, (-30, 21), (-8, 43), (-13, 34)),
  (On, (-22, 26), (-27, 20), (-29, 19)),
  (Off, (-48, -32), (26, 41), (-47, -37)),
  (On, (-12, 35), (6, 50), (-50, -2)),
  (Off, (-48, -32), (-32, -16), (-15, -5)),
  (On, (-18, 26), (-33, 15), (-7, 46)),
  (Off, (-40, -22), (-38, -28), (23, 41)),
  (On, (-16, 35), (-41, 10), (-47, 6)),
  (Off, (-32, -23), (11, 30), (-14, 3)),
  (On, (-49, -5), (-3, 45), (-29, 18)),
  (Off, (18, 30), (-20, -8), (-3, 13)),
  (On, (-41, 9), (-7, 43), (-33, 15)),
]

let inputsPart2 = [
  (On, (-5, 47), (-31, 22), (-19, 33)),
  (On, (-44, 5), (-27, 21), (-14, 35)),
  (On, (-49, -1), (-11, 42), (-10, 38)),
  (On, (-20, 34), (-40, 6), (-44, 1)),
  (Off, (26, 39), (40, 50), (-2, 11)),
  (On, (-41, 5), (-41, 6), (-36, 8)),
  (Off, (-43, -33), (-45, -28), (7, 25)),
  (On, (-33, 15), (-32, 19), (-34, 11)),
  (Off, (35, 47), (-46, -34), (-11, 5)),
  (On, (-14, 36), (-6, 44), (-16, 29)),
  (On, (-57795, -6158), (29564, 72030), (20435, 90618)),
  (On, (36731, 105352), (-21140, 28532), (16094, 90401)),
  (On, (30999, 107136), (-53464, 15513), (8553, 71215)),
  (On, (13528, 83982), (-99403, -27377), (-24141, 23996)),
  (On, (-72682, -12347), (18159, 111354), (7391, 80950)),
  (On, (-1060, 80757), (-65301, -20884), (-103788, -16709)),
  (On, (-83015, -9461), (-72160, -8347), (-81239, -26856)),
  (On, (-52752, 22273), (-49450, 9096), (54442, 119054)),
  (On, (-29982, 40483), (-108474, -28371), (-24328, 38471)),
  (On, (-4958, 62750), (40422, 118853), (-7672, 65583)),
  (On, (55694, 108686), (-43367, 46958), (-26781, 48729)),
  (On, (-98497, -18186), (-63569, 3412), (1232, 88485)),
  (On, (-726, 56291), (-62629, 13224), (18033, 85226)),
  (On, (-110886, -34664), (-81338, -8658), (8914, 63723)),
  (On, (-55829, 24974), (-16897, 54165), (-121762, -28058)),
  (On, (-65152, -11147), (22489, 91432), (-58782, 1780)),
  (On, (-120100, -32970), (-46592, 27473), (-11695, 61039)),
  (On, (-18631, 37533), (-124565, -50804), (-35667, 28308)),
  (On, (-57817, 18248), (49321, 117703), (5745, 55881)),
  (On, (14781, 98692), (-1341, 70827), (15753, 70151)),
  (On, (-34419, 55919), (-19626, 40991), (39015, 114138)),
  (On, (-60785, 11593), (-56135, 2999), (-95368, -26915)),
  (On, (-32178, 58085), (17647, 101866), (-91405, -8878)),
  (On, (-53655, 12091), (50097, 105568), (-75335, -4862)),
  (On, (-111166, -40997), (-71714, 2688), (5609, 50954)),
  (On, (-16602, 70118), (-98693, -44401), (5197, 76897)),
  (On, (16383, 101554), (4615, 83635), (-44907, 18747)),
  (Off, (-95822, -15171), (-19987, 48940), (10804, 104439)),
  (On, (-89813, -14614), (16069, 88491), (-3297, 45228)),
  (On, (41075, 99376), (-20427, 49978), (-52012, 13762)),
  (On, (-21330, 50085), (-17944, 62733), (-112280, -30197)),
  (On, (-16478, 35915), (36008, 118594), (-7885, 47086)),
  (Off, (-98156, -27851), (-49952, 43171), (-99005, -8456)),
  (Off, (2032, 69770), (-71013, 4824), (7471, 94418)),
  (On, (43670, 120875), (-42068, 12382), (-24787, 38892)),
  (Off, (37514, 111226), (-45862, 25743), (-16714, 54663)),
  (Off, (25699, 97951), (-30668, 59918), (-15349, 69697)),
  (Off, (-44271, 17935), (-9516, 60759), (49131, 112598)),
  (On, (-61695, -5813), (40978, 94975), (8655, 80240)),
  (Off, (-101086, -9439), (-7088, 67543), (33935, 83858)),
  (Off, (18020, 114017), (-48931, 32606), (21474, 89843)),
  (Off, (-77139, 10506), (-89994, -18797), (-80, 59318)),
  (Off, (8476, 79288), (-75520, 11602), (-96624, -24783)),
  (On, (-47488, -1262), (24338, 100707), (16292, 72967)),
  (Off, (-84341, 13987), (2429, 92914), (-90671, -1318)),
  (Off, (-37810, 49457), (-71013, -7894), (-105357, -13188)),
  (Off, (-27365, 46395), (31009, 98017), (15428, 76570)),
  (Off, (-70369, -16548), (22648, 78696), (-1892, 86821)),
  (On, (-53470, 21291), (-120233, -33476), (-44150, 38147)),
  (Off, (-93533, -4276), (-16170, 68771), (-104985, -24507)),
]

part1(inputs)
part2(inputsPart2)

